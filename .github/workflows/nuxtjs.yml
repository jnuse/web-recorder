# Sample workflow for building and deploying a Nuxt site to GitHub Pages
#
# To get started with Nuxt see: https://nuxtjs.org/docs/get-started/installation
#
name: Deploy Nuxt site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      # - name: Setup Pages
      #   uses: actions/configure-pages@v3
      #   with:
      #     static_site_generator: nuxt
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            dist
            .nuxt
          key: ${{ runner.os }}-nuxt-build-${{ hashFiles('dist') }}
          restore-keys: |
            ${{ runner.os }}-nuxt-build-
      - name: Use official npm registry
        run: npm config set registry https://registry.npmjs.org
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Static HTML export with Nuxt
        run: ${{ steps.detect-package-manager.outputs.manager }} run generate

      # 压缩 dist 文件夹
      - name: Compress dist folder to record.zip
        run: zip -r record.zip ./dist

      # 获取最新的 release tag，并设置新的 tag
      - name: Get latest tag
        id: get_latest_tag
        run: |
          # 获取最新的 tag，如果没有则返回 0.0.0
          latest_tag=$(git describe --tags --abbrev=0 || echo "1.0.0")
          echo "Latest tag: $latest_tag"
          # 获取主要版本、次要版本和修订号
          IFS='.' read -r major minor patch <<< "${latest_tag#v}"
          # 递增修订号
          new_tag="$major.$minor.$((patch + 1))"
          echo "New tag: $new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      # 创建新的 tag 并推送
      - name: Create new tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag ${{ steps.get_latest_tag.outputs.new_tag }}
          git push origin ${{ steps.get_latest_tag.outputs.new_tag }}

      # 发布压缩文件到 GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_latest_tag.outputs.new_tag }}
          files: record.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
